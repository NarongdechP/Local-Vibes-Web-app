import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { FaHeart, FaUtensils, FaMusic, FaBriefcase } from "react-icons/fa";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSuitcaseRolling } from "@fortawesome/free-solid-svg-icons";
import './EventDetail.css';

// ‡∏ô‡∏≥ categories ‡∏à‡∏≤‡∏Å Home.jsx ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const categories = [
  { name: "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", icon: <FaBriefcase /> },
  { name: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", icon: <FaUtensils /> },
  { name: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", icon: <FaHeart /> },
  { name: "‡∏î‡∏ô‡∏ï‡∏£‡∏µ", icon: <FaMusic /> },
  { name: "‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", icon: <FontAwesomeIcon icon={faSuitcaseRolling} /> }
];

const EventDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [errorMsg, setErrorMsg] = useState("");
  const [isSmallImage, setIsSmallImage] = useState(false);

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        const response = await fetch(`http://localhost:3000/events/${id}`);
        const data = await response.json();

        if (response.ok) {
          setEvent(data.event);
        } else {
          setErrorMsg(data.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
        }
      } catch (error) {
        setErrorMsg("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchEvent();
  }, [id]);

  useEffect(() => {
    if (event && event.event_image_url) {
      checkImageSize(event.event_image_url).then(isSmall => {
        setIsSmallImage(isSmall);
      });
    }
  }, [event]);

  const handleFavorite = async () => {
    try {
      const token = localStorage.getItem("token");

      const response = await fetch("http://localhost:3000/favorites/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ eventId: id }),
      });

      const data = await response.json();

      if (response.ok) {
        navigate("/favorites");
      } else {
        alert(data.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ");
      }
    } catch (err) {
      console.error(err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î");
    }
  };

  const checkImageSize = (imageUrl) => {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => {
        const isSmall = img.width < 600 || img.height < 600;
        resolve(isSmall);
      };
      img.onerror = () => resolve(false);
      img.src = imageUrl;
    });
  };

  if (loading) return <div className="event-detail-loading-message">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå...</div>;
  if (errorMsg) return <div className="event-detail-error-message">‚ùå {errorMsg}</div>;
  if (!event) return <div className="event-detail-loading-message">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>;


  const formatDate = (dateString) => {
    const options = { day: 'numeric', month: 'long', year: 'numeric' };
    return new Date(dateString).toLocaleDateString('th-TH', options);
  };


  const getTags = () => {
    const tags = [];
    
    
    if (event.category && Array.isArray(event.category) && event.category.length > 0) {
      event.category.forEach(catName => {
        const matchedCategory = categories.find(cat => cat.name === catName);
        if (matchedCategory) {
          tags.push({ icon: matchedCategory.icon, text: matchedCategory.name });
        }
      });
    } 
    
    else if (event.category && typeof event.category === 'string') {
  
      const categoryNames = event.category.includes(',') 
        ? event.category.split(',').map(cat => cat.trim())
        : [event.category.trim()];
        
      categoryNames.forEach(catName => {
        const matchedCategory = categories.find(cat => cat.name === catName);
        if (matchedCategory) {
          tags.push({ icon: matchedCategory.icon, text: matchedCategory.name });
        }
      });
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö category ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ó‡πá‡∏Å‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 2 ‡∏≠‡∏±‡∏ô
    if (tags.length === 0) {
      const foodCategory = categories.find(cat => cat.name === "‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
      const musicCategory = categories.find(cat => cat.name === "‡∏î‡∏ô‡∏ï‡∏£‡∏µ");
      
      if (foodCategory) {
        tags.push({ icon: foodCategory.icon, text: foodCategory.name });
      }
      
      if (musicCategory) {
        tags.push({ icon: musicCategory.icon, text: musicCategory.name });
      }
    }
    
    return tags;
  };

  const isPriceFree = !event.price || event.price === 0 || event.price === "0" || event.price === "‡∏ü‡∏£‡∏µ";

  return (
    <div className="event-detail-container">
      <div className="event-detail-image">
        <img
          className={`event-image-container ${isSmallImage ? 'enlarge-image' : ''}`}
          src={event.event_image_url || "/placeholder-image.jpg"}
          alt={event.event_name}
          onError={(e) => {
            e.target.src = "/placeholder-image.jpg";
            console.log("Image failed to load, using placeholder instead");
          }}
        />
      </div>
      
      <div className="event-detail-title">
        <h1>{event.event_name}</h1>
      </div>
      
      <div className="event-detail-date">
        ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatDate(event.start_date).split(' ')[0]}-
        {formatDate(event.end_date).split(' ')[0]} {formatDate(event.end_date).split(' ')[1]} {formatDate(event.end_date).split(' ')[2]}
      </div>
      
      <div className="event-detail-location-section">
        <h3 className="event-detail-section-heading">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</h3>
        <div className="location-name-font">{event.location || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</div>
      </div>
      
      <div className="event-detail-description-section">
        <h3 className="event-detail-section-heading">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
        <div className="event-detail-description">
          {event.description ? (
            <div dangerouslySetInnerHTML={{ __html: event.description.replace(/\n/g, '<br/>') }} />
          ) : (
            <>
              <p>üéâ ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ! ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏£‡∏≠‡∏Ñ‡∏≠‡∏¢ üéâ</p>
              <p>üéäüé°üé† ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏°‡πà‡πÄ‡∏°‡∏≤‡∏∞ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 20 üé†üé°üéä</p>
              <p>‚ù§Ô∏è üôèüèª Mission to Sustainability ‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô ‚ù§Ô∏è üôèüèª</p>
              <p>üöå ‡∏£‡πà‡∏ß‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡∏£‡∏ñ‡∏ö‡∏±‡∏™ ‡∏ä‡∏°‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ ‡∏ó‡πà‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡πÑ‡∏î‡πÇ‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡πÄ‡∏û‡∏•‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏á ‡∏ï‡∏•‡∏≠‡∏î 3 ‡∏ß‡∏±‡∏ô 3 ‡∏Ñ‡∏∑‡∏ô</p>
            </>
          )}
        </div>
      </div>
      
      <div className="event-detail-tag-section">
        <h3 className="event-detail-section-heading">‡πÅ‡∏ó‡πá‡∏Å</h3>
        <div className="event-detail-tags">
          {getTags().map((tag, index) => (
            <div className="event-detail-tag" key={index}>
              <span>{tag.icon} {tag.text}</span>
            </div>
          ))}
        </div>
      </div>
      
      <button className="event-detail-favorite-btn" onClick={handleFavorite}>
        <FaHeart />
        <span className="event-detail-text">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö</span>
      </button>
      
      {/* {isPriceFree && <button className="event-detail-free-button">‡∏ü‡∏£‡∏µ</button>} */}
    </div>
  );
};

export default EventDetail;