import express from "express";
import jwt from "jsonwebtoken";
import { body, validationResult } from "express-validator";
import sanitizeHtml from "sanitize-html";
import mongoose from "mongoose";  // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ mongoose ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ObjectId
import Event from "../models/Event.js";
import authenticateUser from "../middleware/authMiddleware.js"; 

const router = express.Router();

// üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏° validation)
router.post(
    "/create",
    authenticateUser,
    [
        body("event_name").trim().notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå"),
        body("start_date").isISO8601().withMessage("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
        body("end_date").isISO8601().withMessage("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
        body("event_image_url").optional().isURL().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        let { event_name, description, start_date, end_date, location, category, event_image_url } = req.body;
        const userId = req.user.id;

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS
        event_name = sanitizeHtml(event_name);
        description = description ? sanitizeHtml(description) : null;
        location = location ? sanitizeHtml(location) : null;
        category = category ? sanitizeHtml(category) : null;
        event_image_url = event_image_url ? sanitizeHtml(event_image_url) : null;

        try {
            const newEvent = new Event({
                event_name,
                description,
                start_date,
                end_date,
                location,
                category,
                event_image_url,
                created_by: userId,
            });

            await newEvent.save();
            res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", event: newEvent });
        } catch (err) {
            console.error("üî¥ Event Creation Error:", err);
            res.status(500).json({ error: "Internal Server Error" });
        }
    }
);

// üìå ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
router.get("/all", async (req, res) => {
    try {
        const events = await Event.find();
        res.status(200).json({ events });
    } catch (err) {
        console.error("üî¥ Error fetching events:", err);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// üìå API ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
router.get("/search", async (req, res) => {
    const { query } = req.query;

    if (!query) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
    }

    try {
        const events = await Event.find({
            event_name: { $regex: query, $options: "i" }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö case-insensitive
        });

        res.status(200).json({ events });
    } catch (err) {
        console.error("üî¥ Error searching events:", err);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// üìå ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡πÑ‡∏≠‡∏î‡∏µ
router.get("/:id", async (req, res) => {
    const { id } = req.params;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    try {
        const event = await Event.findById(id);
        if (!event) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ" });
        }
        res.status(200).json({ event });
    } catch (err) {
        console.error("üî¥ Error fetching event:", err);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

export default router;
