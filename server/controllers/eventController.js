import { validationResult } from "express-validator";
import sanitizeHtml from "sanitize-html";
import mongoose from "mongoose";
import Event from "../models/Event.js";

export const createEvent = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.error("Validation errors:", errors.array());
    return res.status(400).json({ errors: errors.array() });
  }

  let { event_name, description, start_date, end_date, location, category, event_image_url } = req.body;
  const userId = req.user.id;

  event_name = sanitizeHtml(event_name);
  description = description ? sanitizeHtml(description) : null;
  location = location ? sanitizeHtml(location) : null;
  category = category ? sanitizeHtml(category) : null;
  event_image_url = event_image_url ? sanitizeHtml(event_image_url) : null;

  try {
    const newEvent = new Event({
      event_name,
      description,
      start_date,
      end_date,
      location,
      category,
      event_image_url,
      created_by: userId,
    });

    await newEvent.save();
    res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", event: newEvent });
  } catch (err) {
    console.error("üî¥ Event Creation Error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå" });
  }
};

export const getAllEvents = async (req, res) => {
  try {
    const events = await Event.find();
    res.status(200).json({ events });
  } catch (err) {
    console.error("üî¥ Error fetching events:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

export const searchEvents = async (req, res) => {
  const { query } = req.query;

  if (!query) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
  }

  try {
    const events = await Event.find({
      event_name: { $regex: query, $options: "i" },
    });
    res.status(200).json({ events });
  } catch (err) {
    console.error("üî¥ Error searching events:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

export const getEventById = async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    const event = await Event.findById(id);
    if (!event) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ" });
    }
    res.status(200).json({ event });
  } catch (err) {
    console.error("üî¥ Error fetching event:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

exports.getEventById = async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);

    if (!event) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ' });
    }

    res.status(200).json({ event });
  } catch (err) {
    console.error('Error fetching event:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°' });
  }
};
